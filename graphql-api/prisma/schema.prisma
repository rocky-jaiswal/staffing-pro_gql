// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Geography {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  country Country[]
}

model Country {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.Text
  code        String    @unique
  geography   Geography @relation(fields: [geographyId], references: [id])
  geographyId Int
  Project     Project[]
}

model Industry {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.Text
  Project Project[]
}

model Vertical {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.Text
  Project Project[]
}

model Company {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.Text
  Project Project[]
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.Text
  positions Position[]
}

model Skill {
  id        Int                  @id @default(autoincrement())
  name      String               @unique @db.Text
  positions SkillsForPositions[]
}

model User {
  id                     String                   @id @default(uuid())
  email                  String                   @db.Text
  Project                Project[]
  Position               Position[]
  createdAt              DateTime                 @default(now())
  ApplicantsForPositions ApplicantsForPositions[]
  ProjectAdmins          ProjectAdmins[]
}

model Project {
  id            String          @id @default(uuid())
  title         String          @db.Text
  description   String          @db.Text
  creator       User            @relation(fields: [creatorId], references: [id])
  creatorId     String
  country       Country         @relation(fields: [countryId], references: [id])
  countryId     Int
  industry      Industry        @relation(fields: [industryId], references: [id])
  industryId    Int
  vertical      Vertical        @relation(fields: [verticalId], references: [id])
  verticalId    Int
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
  positions     Position[]
  startDate     DateTime
  endDate       DateTime
  promoted      Boolean
  hidden        Boolean
  archived      Boolean
  createdAt     DateTime        @default(now())
  ProjectAdmins ProjectAdmins[]
}

model Position {
  id          String                   @id @default(uuid())
  description String                   @db.Text
  role        Role                     @relation(fields: [roleId], references: [id])
  roleId      Int
  project     Project                  @relation(fields: [projectId], references: [id])
  projectId   String
  user        User?                    @relation(fields: [userId], references: [id])
  userId      String
  skills      SkillsForPositions[]
  applicants  ApplicantsForPositions[]
  admins      ProjectAdmins[]
}

model SkillsForPositions {
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    Int
  assignedAt DateTime @default(now())

  @@id([positionId, skillId])
}

model ApplicantsForPositions {
  position    Position @relation(fields: [positionId], references: [id])
  positionId  String
  applicant   User     @relation(fields: [applicantId], references: [id])
  applicantId String
  approved    Boolean
  assignedAt  DateTime @default(now())

  @@id([positionId, applicantId])
}

model ProjectAdmins {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  admin      User     @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime @default(now())

  @@id([projectId, userId])
  Position   Position? @relation(fields: [positionId], references: [id])
  positionId String?
}
